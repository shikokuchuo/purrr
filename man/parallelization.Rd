% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallelization.R
\name{parallelization}
\alias{parallelization}
\title{Parallelization in purrr}
\description{
purrr's map functions have a \code{.parallel} argument to parallelize a map using
the \CRANpkg{mirai} package. This allows you to run computations in parallel
using more cores on your machine, or distributed over the network.
}
\section{Crating a function}{
As the function \code{.f} needs to be serialized and sent outside of your current
session to parallel processes, a little care needs to be taken to make sure
that it is self-contained, so that it will work as expected.

A function will be self-contained if:
\itemize{
\item It is a function from base R or any installed package.
\item If it is a user-defined function where everything not defined in the
function itself is passed in as arguments (a pure function).
}

Otherwise, or if you are not sure, use \code{crate()} from the \CRANpkg{carrier}
package to create self-contained functions before supplying to \code{.f}.

It is necessary to \code{crate()} a user-defined function if it references any
object that is not supplied as an argument or defined in the function itself,
i.e. a free variable. Using \code{crate()} ensures that everything needed by the
function is serialized along with it.

Examples:
\preformatted{
# can just use a package function:
map(1:3, stats::runif, .parallel = TRUE)

# crate() a function to include the definition of 'fun':
fun <- function(x) \{x + x \%\% 2 \}
map(1:3, carrier::crate(function(x) x + fun(x), fun = fun), .parallel = TRUE)
}

For further details, see the documentation for \code{carrier::crate()}.
}

\section{Use of \code{...}}{
The use of \code{...} is not allowed when \code{.parallel = TRUE}.

We also generally recommend against passing additional constant arguments in
this way, even in the non-parallel case. Instead use a shorthand anonymous
function:

\preformatted{
# Instead of
x |> map(f, 1, 2, collapse = ",", .parallel = TRUE)
do:
x |> map(\(x) f(x, 1, 2, collapse = ","), .parallel = TRUE)
}

This makes it easier to understand which arguments belong to which function
and will tend to yield better error messages.
}

\section{Daemons settings}{
How and where parallelization occurs is determined by
\code{\link[mirai:daemons]{daemons()}}. This is a function from the \pkg{mirai}
package that sets up daemons (persistent background processes that receive
parallel computations) on your local machine or across the network.

\pkg{purrr} requires these to be set up prior to performing any parallel map
operations. It is usual to set daemons once per session. You can leave them
running as they consume little in resources whilst waiting to receive tasks.

If they are not set, you will see a warning from the \pkg{mirai} package that
it is launching one local daemon - this ensures that the function proceeds,
but offers no actual parallelization and is hence probably not what you would
want.

\code{daemons()}arguments:
\itemize{
\item \code{n}: the number of daemons to launch on your local machine, e.g.
\code{daemons(7)}. As a rule of thumb, for maximum efficiency this should be (at
most) one less than the number of cores on your machine, leaving one core
for the main R process.
\item \code{url} and \code{remote}: used to set up and launch daemons for distributed
computing over the network. See \link[mirai:daemons]{daemons} function
documentation for more details.
\item None: calling \code{daemons()} with no arguments returns a summary of the
current connection status and mirai tasks queued and completed.
}

For more details, including on further arguments, see
\link[mirai:daemons]{daemons}.

Resetting daemons:

\code{daemons(0)} resets and terminates any existing daemons.

All daemons automatically terminate when you end your session and the
connection drops. For this reason, it is not required to specifically
terminate daemons in this instance, although it is still good practice to do
so.
}

\section{with() method}{
The \code{with()} method for daemons provides a convenient way of evaluating a
statement with daemons set up for the duration of the statement.

As an example, the below is evaluated in parallel using 7 daemons:

\preformatted{
with(daemons(7), {
  1:10 |>
  map(rnorm, n = 10, .parallel = TRUE) |>
  map_dbl(mean, .parallel = TRUE)
})
}
}

\section{Further documentation}{
\pkg{purrr}'s parallelization is powered by \CRANpkg{mirai}, so see the
\href{https://shikokuchuo.net/mirai/articles/mirai.html}{mirai introduction and reference}
for more details.

For 'crating' a function, see the \CRANpkg{carrier} package
\href{https://github.com/r-lib/carrier}{readme} for more details.
}

